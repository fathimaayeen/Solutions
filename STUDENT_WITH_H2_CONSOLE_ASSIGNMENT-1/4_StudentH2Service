
package com.example.school.service;

import com.example.school.model.Student;
import com.example.school.repository.StudentRepository;
import com.example.school.model.StudentRowMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;
import java.util.*;

// Write your code here
@Service
public class StudentH2Service implements StudentRepository {
    @Autowired
    private JdbcTemplate db;

    @Override
    public ArrayList<Student> getStudents() {
        List<Student> x = db.query("select * from Student", new StudentRowMapper());
        ArrayList<Student> student = new ArrayList<>(x);
        return student;
    }

    @Override
    public Student getStudentById(int studentId) {
        try {
            Student student = db.queryForObject("select * from Student where studentId=?", new StudentRowMapper(),
                    studentId);
            return student;
        } catch (Exception e) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND);
        }
    }

    @Override
    public Student addStudent(Student student) {
        db.update("insert into Student(studentName, gender, standard) values (?, ?, ?)",
                student.getStudentName(), student.getGender(), student.getStandard());

        Student savedStudent = db.queryForObject(
                "select * from Student where studentName = ?",
                new StudentRowMapper(), student.getStudentName());
        return savedStudent;
    }

    @Override
    public String addStudentsBulk(List<Student> students) {
        int[][] result = db.batchUpdate("INSERT INTO STUDENT (studentName, gender, standard) VALUES (?, ?, ?)",
                students, students.size(),
                (ps, student) -> {
                    ps.setString(1, student.getStudentName());
                    ps.setString(2, student.getGender());
                    ps.setInt(3, student.getStandard());
                });

        return "Successfully added " + result.length + " students";
    }

    @Override
    public Student updateStudent(int studentId, Student student) {
        if (student.getStudentName() != null) {
            db.update("update Student set studentName = ? where studentId=?",
                    student.getStudentName(), studentId);
        }
        if (student.getGender() != null) {
            db.update("update Student set gender = ? where studentId=?",
                    student.getGender(), studentId);
        }
        if (student.getStandard() != 0) {
            db.update("update Student set standard= ? where studentId=?",
                    student.getStandard(), studentId);
        }

        return getStudentById(studentId);
    }

    @Override
    public void deleteStudent(int studentId) {
        try {
            db.update("delete from Student where studentId=? ", studentId);
        } catch (Exception e) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND);
        }

    }

}
